cc_library_shared {

    name: "libinference_engine",
    proprietary: true,
    owner: "intel",
    compile_multilib: "64",

    srcs: [
        "src/inference_engine/blob_factory.cpp",
        "src/inference_engine/blob_transform.cpp",
        "src/inference_engine/builders/ie_const_layer.cpp",
        "src/inference_engine/builders/ie_input_layer_layer.cpp",
        "src/inference_engine/builders/ie_layer_builder.cpp",
        "src/inference_engine/builders/ie_layer_decorator.cpp",
        "src/inference_engine/builders/ie_network_builder.cpp",
        "src/inference_engine/builders/ie_pooling_layer.cpp",
        "src/inference_engine/builders/ie_split_layer.cpp",
        "src/inference_engine/cnn_network_impl.cpp",
        "src/inference_engine/cnn_network_int8_normalizer.cpp",
        "src/inference_engine/cnn_network_ngraph_impl.cpp",
        "src/inference_engine/cnn_network_stats_impl.cpp",
        "src/inference_engine/cpp_interfaces/ie_executor_manager.cpp",
        "src/inference_engine/cpp_interfaces/ie_itask_executor.cpp",
        "src/inference_engine/cpp_interfaces/ie_task_executor.cpp",
        "src/inference_engine/cpp_interfaces/impl/ie_plugin_internal.cpp",
        "src/inference_engine/cpu_detector.cpp",
        "src/inference_engine/cpu_x86_sse42/blob_transform_sse42.cpp",
        "src/inference_engine/file_utils.cpp",
        "src/inference_engine/graph_tools.cpp",
        "src/inference_engine/graph_transformer.cpp",
        "src/inference_engine/ie_blob_common.cpp",
        "src/inference_engine/ie_cnn_layer_builder.cpp",
        "src/inference_engine/ie_cnn_layer_builder_ngraph.cpp",
        "src/inference_engine/ie_cnn_net_reader_impl.cpp",
        "src/inference_engine/ie_compound_blob.cpp",
        "src/inference_engine/ie_context.cpp",
        "src/inference_engine/ie_core.cpp",
        "src/inference_engine/ie_data.cpp",
        "src/inference_engine/ie_format_parser.cpp",
        "src/inference_engine/ie_ir_parser.cpp",
        "src/inference_engine/ie_ir_reader.cpp",
        "src/inference_engine/ie_layer_parsers.cpp",
        "src/inference_engine/ie_layer_validators.cpp",
        "src/inference_engine/ie_layers_internal.cpp",
        "src/inference_engine/ie_layouts.cpp",
        "src/inference_engine/ie_memcpy.cpp",
        "src/inference_engine/ie_network.cpp",
        "src/inference_engine/ie_parameter.cpp",
        "src/inference_engine/ie_plugin_dispatcher.cpp",
        "src/inference_engine/ie_rtti.cpp",
        "src/inference_engine/ie_util_internal.cpp",
        "src/inference_engine/ie_version.cpp",
        "src/inference_engine/low_precision_transformations/activation.cpp",
        "src/inference_engine/low_precision_transformations/blob_transformation.cpp",
        "src/inference_engine/low_precision_transformations/common/dequantization_details.cpp",
        "src/inference_engine/low_precision_transformations/common/dequantization_info.cpp",
        "src/inference_engine/low_precision_transformations/concat.cpp",
        "src/inference_engine/low_precision_transformations/concat_multi_channels.cpp",
        "src/inference_engine/low_precision_transformations/const.cpp",
        "src/inference_engine/low_precision_transformations/convolution.cpp",
        "src/inference_engine/low_precision_transformations/eltwise.cpp",
        "src/inference_engine/low_precision_transformations/eltwise_cpu.cpp",
        "src/inference_engine/low_precision_transformations/fake_quantize.cpp",
        "src/inference_engine/low_precision_transformations/fully_connected.cpp",
        "src/inference_engine/low_precision_transformations/fuse_fake_quantize_and_scale_shift.cpp",
        "src/inference_engine/low_precision_transformations/layer_transformation.cpp",
        "src/inference_engine/low_precision_transformations/mvn.cpp",
        "src/inference_engine/low_precision_transformations/network_helper.cpp",
        "src/inference_engine/low_precision_transformations/permute.cpp",
        "src/inference_engine/low_precision_transformations/pooling.cpp",
        "src/inference_engine/low_precision_transformations/quantization_details.cpp",
        "src/inference_engine/low_precision_transformations/reshape.cpp",
        "src/inference_engine/low_precision_transformations/scaleshift_to_convolution.cpp",
        "src/inference_engine/low_precision_transformations/squeeze.cpp",
        "src/inference_engine/low_precision_transformations/transformation_context.cpp",
        "src/inference_engine/low_precision_transformations/transformer.cpp",
        "src/inference_engine/low_precision_transformations/transparent_base_transformation.cpp",
        "src/inference_engine/low_precision_transformations/weightable_layer_transformation.cpp",
        "src/inference_engine/net_pass.cpp",
        "src/inference_engine/network_serializer.cpp",
        "src/inference_engine/ngraph_ops/convolution_ie.cpp",
        "src/inference_engine/ngraph_ops/crop_ie.cpp",
        "src/inference_engine/ngraph_ops/deconvolution_ie.cpp",
        "src/inference_engine/ngraph_ops/eltwise.cpp",
        "src/inference_engine/ngraph_ops/fully_connected.cpp",
        "src/inference_engine/ngraph_ops/gather_ie.cpp",
        "src/inference_engine/ngraph_ops/gather_tree_ie.cpp",
        "src/inference_engine/ngraph_ops/gemm.cpp",
        "src/inference_engine/ngraph_ops/generic_ie.cpp",
        "src/inference_engine/ngraph_ops/group_conv_bias.cpp",
        "src/inference_engine/ngraph_ops/hard_sigmoid_ie.cpp",
        "src/inference_engine/ngraph_ops/interp.cpp",
        "src/inference_engine/ngraph_ops/lrn_ie.cpp",
        "src/inference_engine/ngraph_ops/lstm_cell_ie.cpp",
        "src/inference_engine/ngraph_ops/nms_ie.cpp",
        "src/inference_engine/ngraph_ops/normalize_ie.cpp",
        "src/inference_engine/ngraph_ops/onehot_ie.cpp",
        "src/inference_engine/ngraph_ops/pad_ie.cpp",
        "src/inference_engine/ngraph_ops/power.cpp",
        "src/inference_engine/ngraph_ops/prior_box_clustered_ie.cpp",
        "src/inference_engine/ngraph_ops/prior_box_ie.cpp",
        "src/inference_engine/ngraph_ops/proposal_ie.cpp",
        "src/inference_engine/ngraph_ops/quantize_conv_bias_fused.cpp",
        "src/inference_engine/ngraph_ops/relu_ie.cpp",
        "src/inference_engine/ngraph_ops/scaleshift.cpp",
        "src/inference_engine/ngraph_ops/selu_ie.cpp",
        "src/inference_engine/ngraph_ops/strided_slice_ie.cpp",
        "src/inference_engine/ngraph_ops/tensor_iterator.cpp",
        "src/inference_engine/ngraph_ops/tile_ie.cpp",
        "src/inference_engine/ngraph_ops/topk_ie.cpp",
        "src/inference_engine/precision_utils.cpp",
        "src/inference_engine/shape_infer/built-in/ie_built_in_holder.cpp",
        "src/inference_engine/shape_infer/const_infer/ie_const_infer_holder.cpp",
        "src/inference_engine/shape_infer/const_infer/ie_const_infer_impl.cpp",
        "src/inference_engine/shape_infer/ie_reshape_io_controllers.cpp",
        "src/inference_engine/shape_infer/ie_reshape_launcher.cpp",
        "src/inference_engine/shape_infer/ie_reshaper.cpp",
        "src/inference_engine/system_allocator.cpp",
        "src/inference_engine/transform/transformations/constant_eltwise_reduction.cpp",
        "src/inference_engine/transform/transformations/convert_broadcast_to_tiles.cpp",
        "src/inference_engine/transform/transformations/convert_mul_add_to_scaleshift_or_power.cpp",
        "src/inference_engine/transform/transformations/quantizeconv_dequantize_fusion.cpp",
        "src/inference_engine/transform/transformations/utils/utils.cpp",
        "src/inference_engine/xml_parse_utils.cpp",
    ],

    local_include_dirs: [
        "include/cldnn",
        "include/cpp",
        "include/details",
        "include/details/os",
        "include/gna",
        "include/gpu",
        "include/hetero",
        "include",
        "include/multi-device",
        "include/vpu",
        "src/inference_engine",
        "src/inference_engine/cpu_x86_sse42",
        "src/preprocessing",
        "thirdparty/pugixml/src",
        "thirdparty/mkl-dnn/src/cpu/xbyak",
        "thirdparty/ocv",
        "thirdparty/fluid/modules/gapi/include",
        "thirdparty/fluid/modules/gapi/src",
    ],

    cflags: [
        "-std=c++11",
        "-Wall",
        "-Wno-unknown-pragmas",
        "-Wno-strict-overflow",
        "-fPIC",
        "-Wformat",
        "-Wformat-security",
        "-fstack-protector-all",
        "-msse4.2",
        "-Wno-unused-variable",
        "-Wno-unused-parameter",
        "-Wno-non-virtual-dtor",
        "-Wno-missing-field-initializers",
        "-fexceptions",
        "-Wno-error",
        "-frtti",
        "-fPIE",
        "-fvisibility=default",
        "-D_FORTIFY_SOURCE=2",
    ] + [
        "-DENABLE_GNA",
        "-DENABLE_OPENCV=OFF",
        "-DENABLE_NGRAPH",
        "-DENABLE_MKL_DNN",
        "-DENABLE_MYRIAD",
        "-DENABLE_IR_READER",
        "-DNGRAPH_VERSION=\"0.27.1-rc.0+b0bb801\"",
        "-DCI_BUILD_NUMBER=\"custom_HEAD_b2140c083a068a63591e8c2e9b5f6b240790519d\"",
        "-DIE_THREAD=IE_THREAD_OMP",
        "-DGAPI_STANDALONE",
        "-DIE_BUILD_POSTFIX=\"\"",
        "-DUSE_STATIC_IE",
        "-DHAVE_SSE",
        "-D__ANDROID__",
        "-DNDEBUG",
        "-DIMPLEMENT_INFERENCE_ENGINE_API",
        "-Dinference_engine_EXPORTS",
    ],

    rtti: true,
        //"-mavx512f",
        //"-mavx512bw",
        //"-mavx2",
        //"-mavx512dq",
        //"-Dcv=fluidcv",
    shared_libs: [
        "liblog",
        "libngraph",
    ],

    static_libs: [
        "libpugixml",
        "libomp",
    ],

    header_libs: [
        "libngraph_headers",
        "libpugixml_headers",
    ],
}

cc_library_headers {
    name: "libinference_headers",
    vendor: true,
    export_include_dirs: [
        "include",
        "include/cpp",
        "include/details",
        "include/details/os",
        "include/cldnn",
        "include/gna",
        "include/gpu",
        "include/hetero",
        "include/multi-device",
        "include/vpu",
        "src/inference_engine",
        "src/preprocessing",
    ],
}

cc_library_shared {

    name: "libinference_engine_preproc",
    proprietary: true,
    owner: "intel",
    compile_multilib: "64",

    local_include_dirs: [
        "src/preprocessing",
        "src/preprocessing/cpu_x86_sse42",
        "thirdparty/ocv",
        "thirdparty/fluid/modules/gapi/include",
    ],

    srcs: [
        "src/preprocessing/ie_preprocess_data.cpp",
        "src/preprocessing/ie_preprocess_gapi.cpp",
        "src/preprocessing/ie_preprocess_gapi_kernels.cpp",
        "src/preprocessing/cpu_x86_sse42/ie_preprocess_data_sse42.cpp",
        "src/preprocessing/cpu_x86_sse42/ie_preprocess_gapi_kernels_sse42.cpp",
    ],

    cflags: [
        "-Wformat",
        "-Wformat-security",
        "-D_FORTIFY_SOURCE=2",
        "-fstack-protector-all",
        "-O2",
        "-DNDEBUG",
        "-fPIC",
        "-fPIE",
        "-fvisibility=default",
        "-Wall",
        "-Wno-unknown-pragmas",
        "-Wno-strict-overflow",
        "-Wno-unused-variable",
        "-Wno-unused-parameter",
        "-Wno-non-virtual-dtor",
        "-Wno-missing-field-initializers",
        "-Wno-error",
        "-fopenmp",
        "-frtti",
        "-fexceptions",
        "-msse4.2",
        "-std=c++11",
    ] + [
        "-D__ANDROID__",
        "-DENABLE_MKL_DNN=1",
        "-DENABLE_MYRIAD=1",
        "-DIE_BUILD_POSTFIX=\"\"",
        "-DIE_THREAD=IE_THREAD_OMP",
        "-DGAPI_STANDALONE",
        "-DIE_BUILD_POSTFIX=\"\"",
        "-DHAVE_SSE",
        "-Dcv=fluidcv",
        "-DIMPLEMENT_PREPROC_PLUGIN",
        "-Dinference_engine_preproc_EXPORTS",
    ],
    rtti: true,

    shared_libs: [
        "liblog",
        "libinference_engine",
    ],

    static_libs: [
        "libomp",
        "libade",
        "libfluid",
    ],

    header_libs: [
        "libinference_headers",
        "libade_headers",
    ],
}

cc_library_headers {
    name: "libinference_preproc_headers",
    vendor: true,
    export_include_dirs: [
        "src/preprocessing",
        "src/preprocessing/cpu_x86_sse42",
    ],
}

cc_library_shared {

    name: "libinference_engine_nn_builder",
    proprietary: true,
    owner: "intel",
    compile_multilib: "64",

    srcs: [
        "src/inference_engine/builders/ie_argmax_layer.cpp",
        "src/inference_engine/builders/ie_batch_normalization_layer.cpp",
        "src/inference_engine/builders/ie_clamp_layer.cpp",
        "src/inference_engine/builders/ie_concat_layer.cpp",
        "src/inference_engine/builders/ie_convolution_layer.cpp",
        "src/inference_engine/builders/ie_crop_layer.cpp",
        "src/inference_engine/builders/ie_ctc_greedy_decoder_layer.cpp",
        "src/inference_engine/builders/ie_deconvolution_layer.cpp",
        "src/inference_engine/builders/ie_deformable_convolution_layer.cpp",
        "src/inference_engine/builders/ie_detection_output_layer.cpp",
        "src/inference_engine/builders/ie_eltwise_layer.cpp",
        "src/inference_engine/builders/ie_elu_layer.cpp",
        "src/inference_engine/builders/ie_fully_connected_layer.cpp",
        "src/inference_engine/builders/ie_grn_layer.cpp",
        "src/inference_engine/builders/ie_gru_sequence_layer.cpp",
        "src/inference_engine/builders/ie_lrn_layer.cpp",
        "src/inference_engine/builders/ie_lstm_sequence_layer.cpp",
        "src/inference_engine/builders/ie_memory_layer.cpp",
        "src/inference_engine/builders/ie_mvn_layer.cpp",
        "src/inference_engine/builders/ie_network_builder_converter.cpp",
        "src/inference_engine/builders/ie_norm_layer.cpp",
        "src/inference_engine/builders/ie_normalize_layer.cpp",
        "src/inference_engine/builders/ie_output_layer_layer.cpp",
        "src/inference_engine/builders/ie_permute_layer.cpp",
        "src/inference_engine/builders/ie_power_layer.cpp",
        "src/inference_engine/builders/ie_prelu_layer.cpp",
        "src/inference_engine/builders/ie_prior_box_clustered_layer.cpp",
        "src/inference_engine/builders/ie_prior_box_layer.cpp",
        "src/inference_engine/builders/ie_proposal_layer.cpp",
        "src/inference_engine/builders/ie_psroi_pooling_layer.cpp",
        "src/inference_engine/builders/ie_region_yolo_layer.cpp",
        "src/inference_engine/builders/ie_relu6_layer.cpp",
        "src/inference_engine/builders/ie_relu_layer.cpp",
        "src/inference_engine/builders/ie_reorg_yolo_layer.cpp",
        "src/inference_engine/builders/ie_resample_layer.cpp",
        "src/inference_engine/builders/ie_reshape_layer.cpp",
        "src/inference_engine/builders/ie_rnn_sequence_layer.cpp",
        "src/inference_engine/builders/ie_roi_pooling_layer.cpp",
        "src/inference_engine/builders/ie_scale_shift_layer.cpp",
        "src/inference_engine/builders/ie_sigmoid_layer.cpp",
        "src/inference_engine/builders/ie_simpler_nms_layer.cpp",
        "src/inference_engine/builders/ie_softmax_layer.cpp",
        "src/inference_engine/builders/ie_tanh_layer.cpp",
        "src/inference_engine/builders/ie_tile_layer.cpp",
        "src/preprocessing/ie_preprocess_data.cpp",
    ],

    cflags: [
        "-Wformat",
        "-Wformat-security",
        "-D_FORTIFY_SOURCE=2",
        "-fstack-protector-all",
        "-O2",
        "-DNDEBUG",
        "-fPIC",
        "-fPIE",
        "-fvisibility=default",
        "-Wall",
        "-Wno-unknown-pragmas",
        "-Wno-strict-overflow",
        "-Wno-unused-variable",
        "-Wno-unused-parameter",
        "-Wno-non-virtual-dtor",
        "-Wno-missing-field-initializers",
        "-Wno-error",
        "-fopenmp",
        "-frtti",
        "-fexceptions",
        "-msse4.2",
        "-std=c++11",
    ] + [
        "-D__ANDROID__",
        "-DENABLE_MKL_DNN=1",
        "-DENABLE_MYRIAD=1",
        "-DIE_BUILD_POSTFIX=\"\"",
        "-DIE_THREAD=IE_THREAD_OMP",
        "-DGAPI_STANDALONE",
        "-DHAVE_SSE",
        "-Dcv=fluidcv",
        "-DIMPLEMENT_INFERENCE_ENGINE_API",
        "-Dinference_engine_nn_builder_EXPORTS",
    ],
    rtti: true,

    shared_libs: [
        "liblog",
        "libinference_engine",
    ],

    static_libs: [
        "libomp",
    ],

    header_libs: [
        "libinference_headers",
        "libinference_preproc_headers"
    ],
}

cc_library_shared {

    name: "libMKLDNNPlugin",
    proprietary: true,
    owner: "intel",
    compile_multilib: "64",

    local_include_dirs: [
        "src/mkldnn_plugin",
        "src/mkldnn_plugin/mkldnn",
        "src/mkldnn_plugin/nodes",
        "src/mkldnn_plugin/utils",
    ],

    srcs: [
        "src/mkldnn_plugin/config.cpp",
        "src/mkldnn_plugin/mean_image.cpp",
        "src/mkldnn_plugin/mkldnn/iml_type_mapper.cpp",
        "src/mkldnn_plugin/mkldnn/os/lin/lin_system_conf.cpp",
        "src/mkldnn_plugin/mkldnn/system_conf.cpp",
        "src/mkldnn_plugin/mkldnn_async_infer_request.cpp",
        "src/mkldnn_plugin/mkldnn_descriptor.cpp",
        "src/mkldnn_plugin/mkldnn_edge.cpp",
        "src/mkldnn_plugin/mkldnn_exec_network.cpp",
        "src/mkldnn_plugin/mkldnn_extension_mngr.cpp",
        "src/mkldnn_plugin/mkldnn_extension_utils.cpp",
        "src/mkldnn_plugin/mkldnn_graph.cpp",
        "src/mkldnn_plugin/mkldnn_graph_dumper.cpp",
        "src/mkldnn_plugin/mkldnn_graph_optimizer.cpp",
        "src/mkldnn_plugin/mkldnn_infer_request.cpp",
        "src/mkldnn_plugin/mkldnn_layers_dispatcher.cpp",
        "src/mkldnn_plugin/mkldnn_memory.cpp",
        "src/mkldnn_plugin/mkldnn_memory_solver.cpp",
        "src/mkldnn_plugin/mkldnn_memory_state.cpp",
        "src/mkldnn_plugin/mkldnn_node.cpp",
        "src/mkldnn_plugin/mkldnn_plugin.cpp",
        "src/mkldnn_plugin/mkldnn_primitive.cpp",
        "src/mkldnn_plugin/mkldnn_streams.cpp",
        "src/mkldnn_plugin/nodes/broadcast.cpp",
        "src/mkldnn_plugin/nodes/bucketize.cpp",
        "src/mkldnn_plugin/nodes/common/softmax.cpp",
        "src/mkldnn_plugin/nodes/convert.cpp",
        "src/mkldnn_plugin/nodes/ctc_greedy.cpp",
        "src/mkldnn_plugin/nodes/depth_to_space.cpp",
        "src/mkldnn_plugin/nodes/detectionoutput.cpp",
        "src/mkldnn_plugin/nodes/detectionoutput_onnx.cpp",
        "src/mkldnn_plugin/nodes/fill.cpp",
        "src/mkldnn_plugin/nodes/gather.cpp",
        "src/mkldnn_plugin/nodes/gather_tree.cpp",
        "src/mkldnn_plugin/nodes/grn.cpp",
        "src/mkldnn_plugin/nodes/interp.cpp",
        "src/mkldnn_plugin/nodes/log_softmax.cpp",
        "src/mkldnn_plugin/nodes/math.cpp",
        "src/mkldnn_plugin/nodes/mkldnn_activation_node.cpp",
        "src/mkldnn_plugin/nodes/mkldnn_batchnorm_node.cpp",
        "src/mkldnn_plugin/nodes/mkldnn_bin_conv_node.cpp",
        "src/mkldnn_plugin/nodes/mkldnn_concat_node.cpp",
        "src/mkldnn_plugin/nodes/mkldnn_conv_node.cpp",
        "src/mkldnn_plugin/nodes/mkldnn_crop_node.cpp",
        "src/mkldnn_plugin/nodes/mkldnn_deconv_node.cpp",
        "src/mkldnn_plugin/nodes/mkldnn_def_conv_node.cpp",
        "src/mkldnn_plugin/nodes/mkldnn_depthwise_node.cpp",
        "src/mkldnn_plugin/nodes/mkldnn_eltwise_node.cpp",
        "src/mkldnn_plugin/nodes/mkldnn_fullyconnected_node.cpp",
        "src/mkldnn_plugin/nodes/mkldnn_gemm_node.cpp",
        "src/mkldnn_plugin/nodes/mkldnn_generic_node.cpp",
        "src/mkldnn_plugin/nodes/mkldnn_input_node.cpp",
        "src/mkldnn_plugin/nodes/mkldnn_lrn_node.cpp",
        "src/mkldnn_plugin/nodes/mkldnn_memory_node.cpp",
        "src/mkldnn_plugin/nodes/mkldnn_mvn_node.cpp",
        "src/mkldnn_plugin/nodes/mkldnn_permute_node.cpp",
        "src/mkldnn_plugin/nodes/mkldnn_pooling_node.cpp",
        "src/mkldnn_plugin/nodes/mkldnn_power_node.cpp",
        "src/mkldnn_plugin/nodes/mkldnn_quantize_node.cpp",
        "src/mkldnn_plugin/nodes/mkldnn_reorder_node.cpp",
        "src/mkldnn_plugin/nodes/mkldnn_reshape_node.cpp",
        "src/mkldnn_plugin/nodes/mkldnn_rnn.cpp",
        "src/mkldnn_plugin/nodes/mkldnn_roi_pooling_node.cpp",
        "src/mkldnn_plugin/nodes/mkldnn_softmax_node.cpp",
        "src/mkldnn_plugin/nodes/mkldnn_split_node.cpp",
        "src/mkldnn_plugin/nodes/mkldnn_tensoriterator_node.cpp",
        "src/mkldnn_plugin/nodes/mkldnn_tile_node.cpp",
        "src/mkldnn_plugin/nodes/non_max_suppression.cpp",
        "src/mkldnn_plugin/nodes/normalize.cpp",
        "src/mkldnn_plugin/nodes/one_hot.cpp",
        "src/mkldnn_plugin/nodes/pad.cpp",
        "src/mkldnn_plugin/nodes/powerfile.cpp",
        "src/mkldnn_plugin/nodes/priorbox.cpp",
        "src/mkldnn_plugin/nodes/priorbox_clustered.cpp",
        "src/mkldnn_plugin/nodes/priorgridgenerator_onnx.cpp",
        "src/mkldnn_plugin/nodes/proposal_onnx.cpp",
        "src/mkldnn_plugin/nodes/psroi.cpp",
        "src/mkldnn_plugin/nodes/range.cpp",
        "src/mkldnn_plugin/nodes/reduce.cpp",
        "src/mkldnn_plugin/nodes/region_yolo.cpp",
        "src/mkldnn_plugin/nodes/reorg_yolo.cpp",
        "src/mkldnn_plugin/nodes/reverse_sequence.cpp",
        "src/mkldnn_plugin/nodes/roifeatureextractor_onnx.cpp",
        "src/mkldnn_plugin/nodes/scatter.cpp",
        "src/mkldnn_plugin/nodes/select.cpp",
        "src/mkldnn_plugin/nodes/shuffle_channels.cpp",
        "src/mkldnn_plugin/nodes/simplernms.cpp",
        "src/mkldnn_plugin/nodes/space_to_depth.cpp",
        "src/mkldnn_plugin/nodes/sparse_fill_empty_rows.cpp",
        "src/mkldnn_plugin/nodes/sparse_segment_reduce.cpp",
        "src/mkldnn_plugin/nodes/sparse_to_dense.cpp",
        "src/mkldnn_plugin/nodes/sparse_weighted_reduce.cpp",
        "src/mkldnn_plugin/nodes/squeeze.cpp",
        "src/mkldnn_plugin/nodes/strided_slice.cpp",
        "src/mkldnn_plugin/nodes/topk.cpp",
        "src/mkldnn_plugin/nodes/topkrois_onnx.cpp",
        "src/mkldnn_plugin/nodes/unique.cpp",
        "src/mkldnn_plugin/nodes/unsqueeze.cpp",
        "src/mkldnn_plugin/utils/blob_dump.cpp",
        "src/mkldnn_plugin/nodes/argmax.cpp",
        "src/mkldnn_plugin/nodes/proposal.cpp",
        "src/mkldnn_plugin/nodes/resample.cpp",
    ],

    cflags: [
        "-Wformat",
        "-Wformat-security",
        "-D_FORTIFY_SOURCE=2",
        "-fstack-protector-all",
        "-O2",
        "-DNDEBUG",
        "-fPIC",
        "-fPIE",
        "-fvisibility=default",
        "-Wall",
        "-Wno-unknown-pragmas",
        "-Wno-strict-overflow",
        "-Wno-unused-variable",
        "-Wno-unused-parameter",
        "-Wno-non-virtual-dtor",
        "-Wno-missing-field-initializers",
        "-Wno-error",
        "-fopenmp",
        "-frtti",
        "-fexceptions",
        "-msse4.2",
        "-std=c++11",
    ] + [
        "-DCOMPILED_CPU_ARGMAX", "-DCOMPILED_CPU_BROADCAST", "-DCOMPILED_CPU_BUCKETIZE", "-DCOMPILED_CPU_CONVERT", "-DCOMPILED_CPU_CTC_GREEDY", "-DCOMPILED_CPU_DEPTH_TO_SPACE", "-DCOMPILED_CPU_DETECTIONOUTPUT", "-DCOMPILED_CPU_DETECTIONOUTPUT_ONNX", "-DCOMPILED_CPU_FILL", "-DCOMPILED_CPU_GATHER", "-DCOMPILED_CPU_GATHER_TREE", "-DCOMPILED_CPU_GRN", "-DCOMPILED_CPU_INTERP", "-DCOMPILED_CPU_LOG_SOFTMAX", "-DCOMPILED_CPU_MATH", "-DCOMPILED_CPU_MKLDNN_ACTIVATION_NODE", "-DCOMPILED_CPU_MKLDNN_BATCHNORM_NODE", "-DCOMPILED_CPU_MKLDNN_BIN_CONV_NODE", "-DCOMPILED_CPU_MKLDNN_CONCAT_NODE", "-DCOMPILED_CPU_MKLDNN_CONV_NODE", "-DCOMPILED_CPU_MKLDNN_CROP_NODE", "-DCOMPILED_CPU_MKLDNN_DECONV_NODE", "-DCOMPILED_CPU_MKLDNN_DEF_CONV_NODE", "-DCOMPILED_CPU_MKLDNN_DEPTHWISE_NODE", "-DCOMPILED_CPU_MKLDNN_ELTWISE_NODE", "-DCOMPILED_CPU_MKLDNN_FULLYCONNECTED_NODE", "-DCOMPILED_CPU_MKLDNN_GEMM_NODE", "-DCOMPILED_CPU_MKLDNN_GENERIC_NODE", "-DCOMPILED_CPU_MKLDNN_INPUT_NODE", "-DCOMPILED_CPU_MKLDNN_LRN_NODE", "-DCOMPILED_CPU_MKLDNN_MEMORY_NODE", "-DCOMPILED_CPU_MKLDNN_MVN_NODE", "-DCOMPILED_CPU_MKLDNN_PERMUTE_NODE", "-DCOMPILED_CPU_MKLDNN_POOLING_NODE", "-DCOMPILED_CPU_MKLDNN_POWER_NODE", "-DCOMPILED_CPU_MKLDNN_QUANTIZE_NODE", "-DCOMPILED_CPU_MKLDNN_REORDER_NODE", "-DCOMPILED_CPU_MKLDNN_RESHAPE_NODE", "-DCOMPILED_CPU_MKLDNN_RNN", "-DCOMPILED_CPU_MKLDNN_ROI_POOLING_NODE", "-DCOMPILED_CPU_MKLDNN_SOFTMAX_NODE", "-DCOMPILED_CPU_MKLDNN_SPLIT_NODE", "-DCOMPILED_CPU_MKLDNN_TENSORITERATOR_NODE", "-DCOMPILED_CPU_MKLDNN_TILE_NODE", "-DCOMPILED_CPU_NON_MAX_SUPPRESSION", "-DCOMPILED_CPU_NORMALIZE", "-DCOMPILED_CPU_ONE_HOT", "-DCOMPILED_CPU_PAD", "-DCOMPILED_CPU_POWERFILE", "-DCOMPILED_CPU_PRIORBOX", "-DCOMPILED_CPU_PRIORBOX_CLUSTERED", "-DCOMPILED_CPU_PRIORGRIDGENERATOR_ONNX", "-DCOMPILED_CPU_PROPOSAL", "-DCOMPILED_CPU_PROPOSAL_ONNX", "-DCOMPILED_CPU_PSROI", "-DCOMPILED_CPU_RANGE", "-DCOMPILED_CPU_REDUCE", "-DCOMPILED_CPU_REGION_YOLO", "-DCOMPILED_CPU_REORG_YOLO", "-DCOMPILED_CPU_RESAMPLE", "-DCOMPILED_CPU_REVERSE_SEQUENCE", "-DCOMPILED_CPU_ROIFEATUREEXTRACTOR_ONNX", "-DCOMPILED_CPU_SCATTER", "-DCOMPILED_CPU_SELECT", "-DCOMPILED_CPU_SHUFFLE_CHANNELS", "-DCOMPILED_CPU_SIMPLERNMS", "-DCOMPILED_CPU_SOFTMAX", "-DCOMPILED_CPU_SPACE_TO_DEPTH", "-DCOMPILED_CPU_SPARSE_FILL_EMPTY_ROWS", "-DCOMPILED_CPU_SPARSE_SEGMENT_REDUCE", "-DCOMPILED_CPU_SPARSE_TO_DENSE", "-DCOMPILED_CPU_SPARSE_WEIGHTED_REDUCE", "-DCOMPILED_CPU_SQUEEZE", "-DCOMPILED_CPU_STRIDED_SLICE", "-DCOMPILED_CPU_TOPK", "-DCOMPILED_CPU_TOPKROIS_ONNX", "-DCOMPILED_CPU_UNIQUE", "-DCOMPILED_CPU_UNSQUEEZE",
    ] + [
        "-D__ANDROID__",
        "-DENABLE_MKL_DNN=1",
        "-DENABLE_MYRIAD=1",
        "-DIE_BUILD_POSTFIX=\"\"",
        "-DIE_THREAD=IE_THREAD_OMP",
        "-DMKLDNN_THR=MKLDNN_THR_OMP",
        "-DHAVE_SSE",
        "-DIMPLEMENT_INFERENCE_ENGINE_PLUGIN",
        "-DCI_BUILD_NUMBER=\"custom_HEAD_b2140c083a068a63591e8c2e9b5f6b240790519d\"",
        "-DMKLDNNPlugin_EXPORTS",
    ],
    rtti: true,

    shared_libs: [
        "liblog",
        "libinference_engine",
    ],

    static_libs: [
        "libomp",
        "libmkldnn",
    ],

    header_libs: [
        "libinference_headers",
        "libmkldnn_headers",
    ],
}

cc_library_static {

    name: "libfluid",
    proprietary: true,
    compile_multilib: "64",
    owner: "intel",

    local_include_dirs: [
        "thirdparty/fluid/modules/gapi/include",
        "thirdparty/fluid/modules/gapi/src",
    ],

    cflags: [
        "-std=c++11",
        "-fvisibility=internal",
        "-fvisibility-inlines-hidden",
        "-Wall",
        "-Werror",
        "-Wno-pass-failed",
        "-Wno-error=unused-private-field",
        "-Wno-unknown-pragmas",
        "-Wno-strict-overflow",
        "-fPIC",
        "-fPIE",
        "-Wformat",
        "-Wformat-security",
        "-fstack-protector-all",
        "-O3",
        "-DNDEBUG",
        "-D_FORTIFY_SOURCE=2",
        "-Wno-unused-variable",
        "-Wno-unused-parameter",
        "-Wno-non-virtual-dtor",
        "-Wno-missing-field-initializers",
        "-Wno-shift-count-overflow",
        "-fexceptions",
        "-fopenmp",
    ] + [
        "-DGAPI_STANDALONE",
        "-Dcv=fluidcv",
        "-D__ANDROID__",
    ],

    rtti: true,

    srcs: [
        "thirdparty/fluid/modules/gapi/src/api/garray.cpp",
        "thirdparty/fluid/modules/gapi/src/api/gbackend.cpp",
        "thirdparty/fluid/modules/gapi/src/api/gcall.cpp",
        "thirdparty/fluid/modules/gapi/src/api/gcomputation.cpp",
        "thirdparty/fluid/modules/gapi/src/api/ginfer.cpp",
        "thirdparty/fluid/modules/gapi/src/api/gkernel.cpp",
        "thirdparty/fluid/modules/gapi/src/api/gmat.cpp",
        "thirdparty/fluid/modules/gapi/src/api/gnode.cpp",
        "thirdparty/fluid/modules/gapi/src/api/gorigin.cpp",
        "thirdparty/fluid/modules/gapi/src/api/gproto.cpp",
        "thirdparty/fluid/modules/gapi/src/api/gscalar.cpp",
        "thirdparty/fluid/modules/gapi/src/backends/common/gcompoundbackend.cpp",
        "thirdparty/fluid/modules/gapi/src/backends/common/gcompoundkernel.cpp",
        "thirdparty/fluid/modules/gapi/src/backends/fluid/gfluidbackend.cpp",
        "thirdparty/fluid/modules/gapi/src/backends/fluid/gfluidbuffer.cpp",
        "thirdparty/fluid/modules/gapi/src/backends/fluid/gfluidcore.cpp",
        "thirdparty/fluid/modules/gapi/src/backends/fluid/gfluidimgproc.cpp",
        "thirdparty/fluid/modules/gapi/src/backends/fluid/gfluidimgproc_func.dispatch.cpp",
        "thirdparty/fluid/modules/gapi/src/compiler/gcompiled.cpp",
        "thirdparty/fluid/modules/gapi/src/compiler/gcompiler.cpp",
        "thirdparty/fluid/modules/gapi/src/compiler/gislandmodel.cpp",
        "thirdparty/fluid/modules/gapi/src/compiler/gmodel.cpp",
        "thirdparty/fluid/modules/gapi/src/compiler/gmodelbuilder.cpp",
        "thirdparty/fluid/modules/gapi/src/compiler/passes/dump_dot.cpp",
        "thirdparty/fluid/modules/gapi/src/compiler/passes/exec.cpp",
        "thirdparty/fluid/modules/gapi/src/compiler/passes/helpers.cpp",
        "thirdparty/fluid/modules/gapi/src/compiler/passes/islands.cpp",
        "thirdparty/fluid/modules/gapi/src/compiler/passes/kernels.cpp",
        "thirdparty/fluid/modules/gapi/src/compiler/passes/meta.cpp",
        "thirdparty/fluid/modules/gapi/src/compiler/passes/pattern_matching.cpp",
        "thirdparty/fluid/modules/gapi/src/executor/gasync.cpp",
        "thirdparty/fluid/modules/gapi/src/executor/gexecutor.cpp",
    ],

    header_libs: [
        "libade_headers",
    ],
}

cc_library_static {

    name: "libmkldnn",
    proprietary: true,
    owner: "intel",
    compile_multilib: "64",

    local_include_dirs: [
        "thirdparty/mkl-dnn/include",
        "thirdparty/mkl-dnn/src",
        "thirdparty/mkl-dnn/src/common",
        "thirdparty/mkl-dnn/src/cpu",
        "thirdparty/mkl-dnn/src/cpu/xbyak",
    ],

    srcs: [
        "thirdparty/mkl-dnn/src/common/batch_normalization.cpp",
        "thirdparty/mkl-dnn/src/common/binary_convolution.cpp",
        "thirdparty/mkl-dnn/src/common/convolution.cpp",
        "thirdparty/mkl-dnn/src/common/convolution_pd.cpp",
        "thirdparty/mkl-dnn/src/common/deconvolution.cpp",
        "thirdparty/mkl-dnn/src/common/deformable_convolution.cpp",
        "thirdparty/mkl-dnn/src/common/depthwise.cpp",
        "thirdparty/mkl-dnn/src/common/eltwise.cpp",
        "thirdparty/mkl-dnn/src/common/engine.cpp",
        "thirdparty/mkl-dnn/src/common/inner_product.cpp",
        "thirdparty/mkl-dnn/src/common/lrn.cpp",
        "thirdparty/mkl-dnn/src/common/memory.cpp",
        "thirdparty/mkl-dnn/src/common/memory_desc_wrapper.cpp",
        "thirdparty/mkl-dnn/src/common/mkldnn_debug.cpp",
        "thirdparty/mkl-dnn/src/common/pooling.cpp",
        "thirdparty/mkl-dnn/src/common/primitive.cpp",
        "thirdparty/mkl-dnn/src/common/primitive_attr.cpp",
        "thirdparty/mkl-dnn/src/common/primitive_desc.cpp",
        "thirdparty/mkl-dnn/src/common/primitive_iterator.cpp",
        "thirdparty/mkl-dnn/src/common/quantization.cpp",
        "thirdparty/mkl-dnn/src/common/query.cpp",
        "thirdparty/mkl-dnn/src/common/reorder.cpp",
        "thirdparty/mkl-dnn/src/common/rnn.cpp",
        "thirdparty/mkl-dnn/src/common/roi_pooling.cpp",
        "thirdparty/mkl-dnn/src/common/scratchpad.cpp",
        "thirdparty/mkl-dnn/src/common/shuffle.cpp",
        "thirdparty/mkl-dnn/src/common/softmax.cpp",
        "thirdparty/mkl-dnn/src/common/stream.cpp",
        "thirdparty/mkl-dnn/src/common/utils.cpp",
        "thirdparty/mkl-dnn/src/common/verbose.cpp",
        "thirdparty/mkl-dnn/src/cpu/bfloat16_utils.cpp",
        "thirdparty/mkl-dnn/src/cpu/cpu_barrier.cpp",
        "thirdparty/mkl-dnn/src/cpu/cpu_batch_normalization_utils.cpp",
        "thirdparty/mkl-dnn/src/cpu/cpu_concat.cpp",
        "thirdparty/mkl-dnn/src/cpu/cpu_engine.cpp",
        "thirdparty/mkl-dnn/src/cpu/cpu_memory.cpp",
        "thirdparty/mkl-dnn/src/cpu/cpu_primitive.cpp",
        "thirdparty/mkl-dnn/src/cpu/cpu_reducer.cpp",
        "thirdparty/mkl-dnn/src/cpu/cpu_reorder.cpp",
        "thirdparty/mkl-dnn/src/cpu/cpu_sum.cpp",
        "thirdparty/mkl-dnn/src/cpu/gemm/bf16/jit_avx512_core_gemm_bf16bf16f32_kern.cpp",
        "thirdparty/mkl-dnn/src/cpu/gemm/bf16/jit_avx512_core_s16_copy_an_kern.cpp",
        "thirdparty/mkl-dnn/src/cpu/gemm/bf16/jit_avx512_core_s16_copy_at_kern.cpp",
        "thirdparty/mkl-dnn/src/cpu/gemm/bf16/jit_avx512_core_s16_copy_bn_kern.cpp",
        "thirdparty/mkl-dnn/src/cpu/gemm/bf16/jit_avx512_core_s16_copy_bt_kern.cpp",
        "thirdparty/mkl-dnn/src/cpu/gemm/f32/gemm_utils_f32.cpp",
        "thirdparty/mkl-dnn/src/cpu/gemm/f32/jit_avx2_f32_copy_an_kern.cpp",
        "thirdparty/mkl-dnn/src/cpu/gemm/f32/jit_avx2_f32_copy_at_kern.cpp",
        "thirdparty/mkl-dnn/src/cpu/gemm/f32/jit_avx2_f32_copy_bn_kern.cpp",
        "thirdparty/mkl-dnn/src/cpu/gemm/f32/jit_avx2_f32_copy_bt_kern.cpp",
        "thirdparty/mkl-dnn/src/cpu/gemm/f32/jit_avx2_kernel_sgemm_kern.cpp",
        "thirdparty/mkl-dnn/src/cpu/gemm/f32/jit_avx512_common_gemm_f32.cpp",
        "thirdparty/mkl-dnn/src/cpu/gemm/f32/jit_avx512_core_f32_copy_an_kern.cpp",
        "thirdparty/mkl-dnn/src/cpu/gemm/f32/jit_avx512_core_f32_copy_at_kern.cpp",
        "thirdparty/mkl-dnn/src/cpu/gemm/f32/jit_avx512_core_f32_copy_bn_kern.cpp",
        "thirdparty/mkl-dnn/src/cpu/gemm/f32/jit_avx512_core_f32_copy_bt_kern.cpp",
        "thirdparty/mkl-dnn/src/cpu/gemm/f32/jit_avx_gemm_f32.cpp",
        "thirdparty/mkl-dnn/src/cpu/gemm/f32/ref_gemm_f32.cpp",
        "thirdparty/mkl-dnn/src/cpu/gemm/gemm.cpp",
        "thirdparty/mkl-dnn/src/cpu/gemm/gemm_driver.cpp",
        "thirdparty/mkl-dnn/src/cpu/gemm/gemm_info.cpp",
        "thirdparty/mkl-dnn/src/cpu/gemm/s8x8s32/jit_avx512_core_gemm_s8u8s32_kern.cpp",
        "thirdparty/mkl-dnn/src/cpu/gemm/s8x8s32/jit_avx512_core_gemv_s8u8s32.cpp",
        "thirdparty/mkl-dnn/src/cpu/gemm/s8x8s32/jit_avx512_core_kernel_gemv_s8u8s32_kern.cpp",
        "thirdparty/mkl-dnn/src/cpu/gemm/s8x8s32/jit_avx512_core_u8_copy_an_kern.cpp",
        "thirdparty/mkl-dnn/src/cpu/gemm/s8x8s32/jit_avx512_core_u8_copy_at_kern.cpp",
        "thirdparty/mkl-dnn/src/cpu/gemm/s8x8s32/jit_avx512_core_u8_copy_bn_kern.cpp",
        "thirdparty/mkl-dnn/src/cpu/gemm/s8x8s32/jit_avx512_core_u8_copy_bt_kern.cpp",
        "thirdparty/mkl-dnn/src/cpu/gemm/s8x8s32/jit_avx512_core_u8_copy_sum_an_kern.cpp",
        "thirdparty/mkl-dnn/src/cpu/gemm/s8x8s32/jit_avx512_core_u8_copy_sum_at_kern.cpp",
        "thirdparty/mkl-dnn/src/cpu/gemm/s8x8s32/jit_avx512_core_u8_copy_sum_bn_kern.cpp",
        "thirdparty/mkl-dnn/src/cpu/gemm/s8x8s32/jit_avx512_core_u8_copy_sum_bt_kern.cpp",
        "thirdparty/mkl-dnn/src/cpu/gemm/s8x8s32/ref_gemm_s8x8s32.cpp",
        "thirdparty/mkl-dnn/src/cpu/gemm/s8x8s32/simple_gemm_s8s8s32.cpp",
        "thirdparty/mkl-dnn/src/cpu/gemm_bf16_convolution.cpp",
        "thirdparty/mkl-dnn/src/cpu/gemm_bf16_inner_product.cpp",
        "thirdparty/mkl-dnn/src/cpu/gemm_convolution.cpp",
        "thirdparty/mkl-dnn/src/cpu/gemm_convolution_utils.cpp",
        "thirdparty/mkl-dnn/src/cpu/gemm_inner_product.cpp",
        "thirdparty/mkl-dnn/src/cpu/gemm_inner_product_utils.cpp",
        "thirdparty/mkl-dnn/src/cpu/gemm_x8s8s32x_convolution.cpp",
        "thirdparty/mkl-dnn/src/cpu/gemm_x8s8s32x_inner_product.cpp",
        "thirdparty/mkl-dnn/src/cpu/jit_avx2_1x1_conv_kernel_f32.cpp",
        "thirdparty/mkl-dnn/src/cpu/jit_avx2_1x1_convolution.cpp",
        "thirdparty/mkl-dnn/src/cpu/jit_avx2_conv_kernel_f32.cpp",
        "thirdparty/mkl-dnn/src/cpu/jit_avx2_convolution.cpp",
        "thirdparty/mkl-dnn/src/cpu/jit_avx512_common_1x1_conv_kernel.cpp",
        "thirdparty/mkl-dnn/src/cpu/jit_avx512_common_1x1_convolution.cpp",
        "thirdparty/mkl-dnn/src/cpu/jit_avx512_common_conv_kernel.cpp",
        "thirdparty/mkl-dnn/src/cpu/jit_avx512_common_conv_winograd_kernel_f32.cpp",
        "thirdparty/mkl-dnn/src/cpu/jit_avx512_common_convolution.cpp",
        "thirdparty/mkl-dnn/src/cpu/jit_avx512_common_convolution_winograd.cpp",
        "thirdparty/mkl-dnn/src/cpu/jit_avx512_common_lrn.cpp",
        "thirdparty/mkl-dnn/src/cpu/jit_avx512_core_bf16_1x1_conv_kernel.cpp",
        "thirdparty/mkl-dnn/src/cpu/jit_avx512_core_bf16_1x1_convolution.cpp",
        "thirdparty/mkl-dnn/src/cpu/jit_avx512_core_bf16_conv_kernel.cpp",
        "thirdparty/mkl-dnn/src/cpu/jit_avx512_core_bf16_convolution.cpp",
        "thirdparty/mkl-dnn/src/cpu/jit_avx512_core_bf16_dw_conv_kernel.cpp",
        "thirdparty/mkl-dnn/src/cpu/jit_avx512_core_bf16_sum.cpp",
        "thirdparty/mkl-dnn/src/cpu/jit_avx512_core_fp32_wino_conv_2x3.cpp",
        "thirdparty/mkl-dnn/src/cpu/jit_avx512_core_fp32_wino_conv_4x3.cpp",
        "thirdparty/mkl-dnn/src/cpu/jit_avx512_core_fp32_wino_conv_4x3_kernel.cpp",
        "thirdparty/mkl-dnn/src/cpu/jit_avx512_core_u8s8s32x_wino_convolution.cpp",
        "thirdparty/mkl-dnn/src/cpu/jit_avx512_core_x8s8s32x_1x1_conv_kernel.cpp",
        "thirdparty/mkl-dnn/src/cpu/jit_avx512_core_x8s8s32x_1x1_convolution.cpp",
        "thirdparty/mkl-dnn/src/cpu/jit_avx512_core_x8s8s32x_conv_kernel.cpp",
        "thirdparty/mkl-dnn/src/cpu/jit_avx512_core_x8s8s32x_convolution.cpp",
        "thirdparty/mkl-dnn/src/cpu/jit_avx512_core_x8s8s32x_deconvolution.cpp",
        "thirdparty/mkl-dnn/src/cpu/jit_sse42_1x1_conv_kernel_f32.cpp",
        "thirdparty/mkl-dnn/src/cpu/jit_sse42_1x1_convolution.cpp",
        "thirdparty/mkl-dnn/src/cpu/jit_sse42_conv_kernel_f32.cpp",
        "thirdparty/mkl-dnn/src/cpu/jit_sse42_convolution.cpp",
        "thirdparty/mkl-dnn/src/cpu/jit_sse42_i8i8_pooling.cpp",
        "thirdparty/mkl-dnn/src/cpu/jit_transpose_src_utils.cpp",
        "thirdparty/mkl-dnn/src/cpu/jit_uni_batch_normalization.cpp",
        "thirdparty/mkl-dnn/src/cpu/jit_uni_batch_normalization_s8.cpp",
        "thirdparty/mkl-dnn/src/cpu/jit_uni_bin_conv_kernel.cpp",
        "thirdparty/mkl-dnn/src/cpu/jit_uni_binary_convolution.cpp",
        "thirdparty/mkl-dnn/src/cpu/jit_uni_def_conv_kernel_f32.cpp",
        "thirdparty/mkl-dnn/src/cpu/jit_uni_deformable_convolution.cpp",
        "thirdparty/mkl-dnn/src/cpu/jit_uni_depthwise.cpp",
        "thirdparty/mkl-dnn/src/cpu/jit_uni_dw_conv_kernel_f32.cpp",
        "thirdparty/mkl-dnn/src/cpu/jit_uni_dw_convolution.cpp",
        "thirdparty/mkl-dnn/src/cpu/jit_uni_eltwise.cpp",
        "thirdparty/mkl-dnn/src/cpu/jit_uni_i8i8_pooling.cpp",
        "thirdparty/mkl-dnn/src/cpu/jit_uni_lrn.cpp",
        "thirdparty/mkl-dnn/src/cpu/jit_uni_lrn_kernel_f32.cpp",
        "thirdparty/mkl-dnn/src/cpu/jit_uni_planar_conv_kernel_f32.cpp",
        "thirdparty/mkl-dnn/src/cpu/jit_uni_planar_convolution.cpp",
        "thirdparty/mkl-dnn/src/cpu/jit_uni_pool_kernel.cpp",
        "thirdparty/mkl-dnn/src/cpu/jit_uni_pooling.cpp",
        "thirdparty/mkl-dnn/src/cpu/jit_uni_quantization.cpp",
        "thirdparty/mkl-dnn/src/cpu/jit_uni_reorder.cpp",
        "thirdparty/mkl-dnn/src/cpu/jit_uni_reorder_utils.cpp",
        "thirdparty/mkl-dnn/src/cpu/jit_uni_roi_pool_kernel_f32.cpp",
        "thirdparty/mkl-dnn/src/cpu/jit_uni_roi_pooling.cpp",
        "thirdparty/mkl-dnn/src/cpu/jit_uni_softmax.cpp",
        "thirdparty/mkl-dnn/src/cpu/jit_uni_softmax_kernel_f32.cpp",
        "thirdparty/mkl-dnn/src/cpu/jit_uni_x8s8s32x_conv_kernel.cpp",
        "thirdparty/mkl-dnn/src/cpu/jit_uni_x8s8s32x_convolution.cpp",
        "thirdparty/mkl-dnn/src/cpu/jit_uni_x8s8s32x_dw_conv_kernel.cpp",
        "thirdparty/mkl-dnn/src/cpu/jit_uni_x8s8s32x_dw_convolution.cpp",
        "thirdparty/mkl-dnn/src/cpu/nchw_pooling.cpp",
        "thirdparty/mkl-dnn/src/cpu/ncsp_batch_normalization.cpp",
        "thirdparty/mkl-dnn/src/cpu/nhwc_pooling.cpp",
        "thirdparty/mkl-dnn/src/cpu/nspc_batch_normalization.cpp",
        "thirdparty/mkl-dnn/src/cpu/ref_batch_normalization.cpp",
        "thirdparty/mkl-dnn/src/cpu/ref_binary_convolution.cpp",
        "thirdparty/mkl-dnn/src/cpu/ref_convolution.cpp",
        "thirdparty/mkl-dnn/src/cpu/ref_deconvolution.cpp",
        "thirdparty/mkl-dnn/src/cpu/ref_deformable_convolution.cpp",
        "thirdparty/mkl-dnn/src/cpu/ref_depthwise.cpp",
        "thirdparty/mkl-dnn/src/cpu/ref_eltwise.cpp",
        "thirdparty/mkl-dnn/src/cpu/ref_inner_product.cpp",
        "thirdparty/mkl-dnn/src/cpu/ref_lrn.cpp",
        "thirdparty/mkl-dnn/src/cpu/ref_pooling.cpp",
        "thirdparty/mkl-dnn/src/cpu/ref_quantization.cpp",
        "thirdparty/mkl-dnn/src/cpu/ref_roi_pooling.cpp",
        "thirdparty/mkl-dnn/src/cpu/ref_shuffle.cpp",
        "thirdparty/mkl-dnn/src/cpu/ref_softmax.cpp",
        "thirdparty/mkl-dnn/src/cpu/rnn/cell_common.cpp",
        "thirdparty/mkl-dnn/src/cpu/rnn/cell_gru.cpp",
        "thirdparty/mkl-dnn/src/cpu/rnn/cell_gru_lbr.cpp",
        "thirdparty/mkl-dnn/src/cpu/rnn/ref_postgemm_gru.cpp",
        "thirdparty/mkl-dnn/src/cpu/rnn/ref_postgemm_gru_lbr.cpp",
        "thirdparty/mkl-dnn/src/cpu/rnn/ref_postgemm_lstm.cpp",
        "thirdparty/mkl-dnn/src/cpu/rnn/ref_postgemm_rnn.cpp",
        "thirdparty/mkl-dnn/src/cpu/rnn/ref_rnn.cpp",
        "thirdparty/mkl-dnn/src/cpu/rnn/rnn_utils.cpp",
        "thirdparty/mkl-dnn/src/cpu/simple_concat.cpp",
        "thirdparty/mkl-dnn/src/cpu/simple_sum.cpp"
    ],

    cflags: [
        "-Wformat",
        "-Wformat-security",
        "-D_FORTIFY_SOURCE=2",
        "-fstack-protector-all",
        "-O2",
        "-DNDEBUG",
        "-fPIC",
        "-fPIE",
        "-fvisibility=default",
        "-Wall",
        "-Wno-unknown-pragmas",
        "-Wno-strict-overflow",
        "-Wno-unused-variable",
        "-Wno-unused-parameter",
        "-Wno-non-virtual-dtor",
        "-Wno-missing-field-initializers",
        "-Wno-error",
        "-fopenmp",
        "-frtti",
        "-fexceptions",
        "-msse4.2",
        "-std=c++11",
    ] + [
        "-D__ANDROID__",
    ],
    rtti: true,

    header_libs: [
        "libinference_headers",
    ],
}

cc_library_headers {
    name: "libmkldnn_headers",
    vendor: true,
    export_include_dirs: [
        "thirdparty/mkl-dnn/include",
        "thirdparty/mkl-dnn/src",
        "thirdparty/mkl-dnn/src/common",
        "thirdparty/mkl-dnn/src/cpu",
        "thirdparty/mkl-dnn/src/cpu/xbyak",
    ],
}

//#################################################
cc_library_static {

    name: "libpugixml",
    proprietary: true,
    compile_multilib: "64",

    srcs: ["thirdparty/pugixml/src/pugixml.cpp"],

    local_include_dirs: [
        "src",
    ],

    cflags: [
        "-std=c++11",
        "-Wall",
        "-Wno-unknown-pragmas",
        "-Wno-strict-overflow",
        "-fPIC",
        "-Wformat",
        "-Wformat-security",
        "-fstack-protector-all",
    ] + [
        "-Wno-unused-variable",
        "-Wno-unused-parameter",
        "-Wno-non-virtual-dtor",
        "-Wno-missing-field-initializers",
        "-fexceptions",
        "-frtti",
        "-Wno-error",
    ] + [
        "-DNDEBUG",
        "-D__ANDROID__",
    ],
    rtti: true,
}

cc_library_headers {
    name: "libpugixml_headers",
    vendor: true,
    export_include_dirs: ["thirdparty/pugixml/src"],
}

//#################################################
cc_library_shared {

    name: "libformat_reader",
    proprietary: true,
    owner: "intel",
    compile_multilib: "64",

    srcs: [
        "samples/common/format_reader/bmp.cpp",
        "samples/common/format_reader/format_reader.cpp",
        "samples/common/format_reader/MnistUbyte.cpp",
    ],

    local_include_dirs: [
        "samples/common/format_reader",
        "samples/common",
    ],

    cflags: [
        "-std=c++11",
        "-Wall",
        "-Wno-unknown-pragmas",
        "-Wno-strict-overflow",
        "-fPIC",
        "-Wformat",
        "-Wformat-security",
        "-fstack-protector-all",
        "-Wno-unused-variable",
        "-Wno-unused-parameter",
        "-Wno-non-virtual-dtor",
        "-Wno-missing-field-initializers",
        "-fexceptions",
        "-frtti",
        "-Wno-error",
        "-fPIE",
        "-fvisibility=default",
        "-D_FORTIFY_SOURCE=2",
        "-fPIE",
    ] + [
        "-DIMPLEMENT_FORMAT_READER",
        "-Dformat_reader_EXPORTS",
    ],
    rtti: true,

    shared_libs: [
        "liblog",
        "libutils",
    ],
}

cc_binary {
    name: "classification_sample",
    proprietary: true,
    compile_multilib: "64",
    srcs: [
        "samples/classification_sample_async/main.cpp",
    ],

    local_include_dirs: [
        "samples/common",
        "samples/common/format_reader",
    ],

    cflags: [
        "-Wno-error=deprecated-declarations",
        "-O3",
        "-DNDEBUG",
        "-fPIE",
        "-fvisibility=hidden",
        "-fvisibility-inlines-hidden",
        "-fopenmp",
        "-fexceptions",
        "-Wno-unused-parameter",
        "-std=c++11",
        "-Wno-non-virtual-dtor",
        "-Wno-error=deprecated-declarations",
        "-frtti",
        "-D__ANDROID__",
    ],
    rtti: true,

    shared_libs: [
        "liblog",
        "libutils",
        "libinference_engine",
        "libformat_reader",
    ],

    header_libs: [
        "libinference_headers",
    ],
}
